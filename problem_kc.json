{"Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.": [["Understanding conditional statements (if statements) to control program flow based on specific conditions.", "Conditional Logic and Evaluation"], ["Managing program constructs like blocks, statements, and expressions in Java.", "Java Control Flow Structures"], ["Implementing functions with parameters and return values in Java.", "Method Handling and Invocation in Java"], ["Using ternary operators for concise conditional logic in expressions.", "Conditional Logic and Evaluation"], ["Using comparison operators to evaluate numerical ranges in programming.", "Conditional Logic and Evaluation"], ["Defining and using integer types and data types in Java.", "Integer Operations and Manipulations"], ["Working with boolean expressions to modify behavior based on additional criteria (like checking for a birthday).", "Boolean Expressions and Logic"]], "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".": [["Manipulating boolean variables to control flow in a program", "Conditional Logic and Evaluation"], ["Working with primitive data types, specifically integers and booleans", "Integer Operations and Manipulations"], ["Applying logical operations to evaluate conditions", "Conditional Logic and Evaluation"], ["Implementing string manipulation and returning string values from methods", "Method Handling and Invocation in Java"], ["Handling multiple return statements based on conditions", "Conditional Logic and Evaluation"], ["Using parameters and understanding method signatures in Java", "Method Handling and Invocation in Java"], ["Understanding conditional logic using if-statements or ternary operators", "Conditional Logic and Evaluation"]], "You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).": [["Identify and handle edge cases based on specified criteria.", "Conditional Logic and Evaluation"], ["Implement nested conditional expressions, including ternary operators.", "Conditional Logic and Evaluation"], ["Utilize comparison operators to evaluate numeric conditions.", "Conditional Logic and Evaluation"], ["Construct return statements to return values from methods.", "Method Return Values"], ["Understand the use of parameters in method declarations.", "Method Handling and Invocation in Java"], ["Apply conditional logic using if statements to control program flow.", "Conditional Logic and Evaluation"]], "When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.": [["Implement inclusive range checks for numerical values.", "Conditional Logic and Evaluation"], ["Utilize ternary expressions for concise conditional evaluations.", "Conditional Logic and Evaluation"], ["Understand conditional logic and its application in programming.", "Conditional Logic and Evaluation"], ["Apply logical operators to compare values.", "Conditional Logic and Evaluation"], ["Construct and interpret control flow structures, such as if-statements.", "Java Control Flow Structures"], ["Handle method parameters and apply types correctly.", "Method Handling and Invocation in Java"], ["Implement return statements based on conditions.", "Conditional Logic and Evaluation"]], "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.": [["Understanding conditional logic using if-else statements or ternary operators", "Conditional Logic and Evaluation"], ["Identifying unique and duplicate values in a set of variables", "Boolean Expressions and Logic"], ["Applying basic return values based on conditions", "Conditional Logic and Evaluation"], ["Utilizing comparisons for integer values", "Conditional Logic and Evaluation"], ["Writing and using methods with parameters in Java", "Method Handling and Invocation in Java"]], "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.": [["Using control flow statements to handle different scenarios", "Conditional Logic and Evaluation"], ["Creating and utilizing formal parameters in method declarations", "Method Handling and Invocation in Java"], ["Using functions and return values in Java", "Method Return Values"], ["Implementing logical expressions with boolean values", "Boolean Expressions and Logic"], ["Recognizing the significance of method return types and their implications", "Method Return Values"], ["Understanding conditional statements in programming", "Conditional Logic and Evaluation"]], "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.": [["Implementing binary expressions for arithmetic operations", "Integer Operations and Manipulations"], ["Understanding and using conditional statements", "Conditional Logic and Evaluation"], ["Returning boolean values based on logical conditions", "Boolean Expressions and Logic"], ["Using identifiers and variables to store and manipulate values", "Variable Scope and Management"], ["Defining functions with parameters in Java", "Method Handling and Invocation in Java"], ["Evaluating expressions with operator precedence and parentheses", "Conditional Logic and Evaluation"], ["Using built-in methods (e.g., Math.abs) to perform operations on numbers", "Integer Operations and Manipulations"]], "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.": [["Return values from methods in Java", "Method Return Values"], ["Utilize boolean expressions for comparison in Java", "Boolean Expressions and Logic"], ["Use conditional expressions or ternary operators in Java", "Conditional Logic and Evaluation"], ["Create and manage local variables within a method", "Variable Scope and Management"], ["Define and declare methods in Java", "Variable Scope and Management"], ["Implement control flow statements (if-else) in Java", "Java Control Flow Structures"], ["Perform arithmetic operations on integers", "Integer Operations and Manipulations"], ["Use basic data types in Java (specifically int)", "Integer Operations and Manipulations"]], "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.": [["Understand and implement conditional logic using if statements", "Conditional Logic and Evaluation"], ["Use variable identifiers effectively within scope", "Variable Scope and Management"], ["Work with numerical ranges and relational operators", "Conditional Logic and Evaluation"], ["Utilize ternary operators for succinct conditional expressions", "Conditional Logic and Evaluation"], ["Define and declare methods with parameters in Java", "Method Handling and Invocation in Java"], ["Handle boolean parameters to modify behavior of logic", "Boolean Expressions and Logic"], ["Return values based on specified conditions", "Conditional Logic and Evaluation"]], "Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.": [["Implement return statements in methods to produce output results.", "Method Return Values"], ["Familiarity with ternary operators as a concise way to express conditional return values.", "Conditional Logic and Evaluation"], ["Apply logical operators to compare values and evaluate boolean expressions.", "Boolean Expressions and Logic"], ["Utilize parameters in method definitions to receive input values.", "Method Handling and Invocation in Java"], ["Understand the concept of scope and blocks in method implementations.", "Variable Scope and Management"], ["Understand the use of conditional statements (if-else) to implement logic based on multiple conditions.", "Conditional Logic and Evaluation"]], "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.": [["Implementing logic for comparisons and finding the maximum or minimum in given values.", "Conditional Logic and Evaluation"], ["Returning values based on logical conditions in a function.", "Boolean Expressions and Logic"], ["Understanding and using conditional statements (if statements) to control flow in a program.", "Conditional Logic and Evaluation"], ["Working with integral data types in Java and ensuring values meet specified conditions.", "Integer Operations and Manipulations"], ["Creating and using functions that accept parameters in Java.", "Method Handling and Invocation in Java"]], "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().": [["Performing arithmetic operations and understanding the concept of rounding integers to specific multiples.", "Integer Operations and Manipulations"], ["Using data types and variables effectively, particularly integral types (ints) for mathematical computations.", "Integer Operations and Manipulations"], ["Creating and utilizing helper methods to encapsulate functionality while avoiding code repetition.", "Problem Decomposition and Modular Programming"], ["Understanding and implementing basic conditional logic (if statements) to control program flow based on integer value characteristics.", "Conditional Logic and Evaluation"], ["Declaring and invoking methods with parameters to facilitate data processing and manipulation.", "Method Handling and Invocation in Java"]], "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.": [["Handling edge cases in problem-solving, such as returning -1 when a solution cannot be found", "Conditional Logic and Evaluation"], ["Implementing methods with parameters in Java", "Method Handling and Invocation in Java"], ["Returning values from methods in Java", "Method Return Values"], ["Awareness of the importance of modular programming in creating reusable components", "Problem Decomposition and Modular Programming"], ["Employing conditional statements to handle different cases in logic", "Conditional Logic and Evaluation"], ["Using arithmetic operations to solve problems involving addition and subtraction", "Integer Operations and Manipulations"], ["Understanding how to declare and use variables in Java", "Variable Scope and Management"], ["Utilizing ternary operators for conditional expressions", "Conditional Logic and Evaluation"]], "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.": [["Extracting substrings from a given string based on indices.", "String Manipulation Techniques"], ["Handling return values from methods and conditional expressions.", "Method Return Values"], ["Using method invocations to perform operations on strings.", "Method Handling and Invocation in Java"], ["Implementing conditional statements (if statements) to control program flow based on string conditions.", "Conditional Logic and Evaluation"], ["Understanding string manipulation methods and their usage in Java.", "String Manipulation Techniques"], ["Utilizing ternary operations for concise conditional returns.", "Conditional Logic and Evaluation"]], "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.": [["Ability to utilize mathematical operations for comparing values.", "Conditional Logic and Evaluation"], ["Able to implement conditional logic to check numerical relationships.", "Conditional Logic and Evaluation"], ["Know how to declare variables and assign values within a method.", "Variable Scope and Management"], ["Understand return statements and their role in methods.", "Method Return Values"], ["Understand how to access array elements in Java.", "Array Management in Java"], ["Know how to create and manipulate arrays in Java.", "Array Management in Java"], ["Understand how to declare and use methods in Java.", "Variable Scope and Management"]], "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.": [["Managing variable scopes and understanding local variable declarations.", "Variable Scope and Management"], ["Using binary expressions to evaluate conditions and perform operations on integers.", "Integer Operations and Manipulations"], ["Returning values from methods in Java.", "Method Return Values"], ["Implementing conditional logic using if statements to control the flow of the program based on variable values.", "Conditional Logic and Evaluation"], ["Developing algorithms that skip certain elements based on specific criteria (in this case, the value 13).", "Conditional Logic and Evaluation"], ["Using arithmetic operations to compute sums and manipulations of integers.", "Integer Operations and Manipulations"], ["Understanding basic Java syntax and structure, including method declarations, parameter handling, and return statements.", "Method Handling and Invocation in Java"]], "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.": [["Knowledge of using return statements in methods to send back results.", "Method Return Values"], ["Familiarity with variable assignment and the use of local variables within methods.", "Variable Scope and Management"], ["Proficiency in comparing values and implementing logic to handle duplicates in a list of variables.", "Boolean Expressions and Logic"], ["Ability to use conditional statements (if statements) to control the flow of the program based on certain conditions.", "Conditional Logic and Evaluation"], ["Ability to work with different data types, especially integers, in arithmetic operations.", "Integer Operations and Manipulations"], ["Understanding how to declare and define a method in Java, including parameters.", "Method Handling and Invocation in Java"]], "Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.": [["Recognize and handle edge cases in logical comparisons", "Conditional Logic and Evaluation"], ["Understand conditional statements and their nesting", "Conditional Logic and Evaluation"], ["Implement and evaluate boolean expressions", "Boolean Expressions and Logic"], ["Use return statements to provide output from methods", "Method Return Values"], ["Develop algorithms to solve problems based on specific rules", "Conditional Logic and Evaluation"], ["Apply logic operations to determine multiple conditions", "Conditional Logic and Evaluation"], ["Work with integer variables and control their values", "Integer Operations and Manipulations"]], "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").": [["Decomposing problems into smaller, manageable components", "Problem Decomposition and Modular Programming"], ["Understanding method declaration and invocation", "Method Handling and Invocation in Java"], ["Using arithmetic operations to compute sums", "Integer Operations and Manipulations"], ["Applying boolean logic to determine conditions", "Conditional Logic and Evaluation"], ["Utilizing conditional statements to apply business logic", "Conditional Logic and Evaluation"], ["Identifying ranges and handling exceptions in input values", "Conditional Logic and Evaluation"], ["Implementing helper methods for code reduction and testing", "Problem Decomposition and Modular Programming"]], "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.": [["Handle string length checking to implement alternative logic for edge cases.", "Conditional Logic and Evaluation"], ["Implement conditional logic using if statements or ternary operators.", "Conditional Logic and Evaluation"], ["Understand string manipulation in Java, specifically extracting substrings.", "String Manipulation Techniques"], ["Return values from a method in Java.", "Method Return Values"], ["Use method invocation for built-in Java string methods.", "Method Handling and Invocation in Java"]], "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.": [["Understanding the structure of strings and how to manipulate them in Java.", "String Manipulation Techniques"], ["Using methods like indexOf() to find specific substrings within strings.", "String Manipulation Techniques"], ["Manage and return values from expressions in Java", "Method Return Values"], ["Implementing conditional logic (if statements) to handle cases such as checking for the presence of substrings.", "Conditional Logic and Evaluation"], ["Returning values from methods based on conditions evaluated during runtime.", "Conditional Logic and Evaluation"]], "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.": [["Implement methods that accept multiple parameters", "Method Handling and Invocation in Java"], ["Implement conditional logic to determine substring occurrences", "Conditional Logic and Evaluation"], ["Manage and return values from expressions in Java", "Method Return Values"], ["Utilize string methods such as toLowerCase() for manipulation", "Method Handling and Invocation in Java"], ["Understand how to compare strings in a case-insensitive manner", "Conditional Logic and Evaluation"], ["Know how to use method invocation for string operations", "Method Handling and Invocation in Java"], ["Work with boolean return values from conditional checks", "Boolean Expressions and Logic"]], "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.": [["Using conditional statements to evaluate expressions based on specific criteria", "Conditional Logic and Evaluation"], ["Implementing control flow structures such as loops and if-statements in Java", "Java Control Flow Structures"], ["Understanding string manipulation and the use of substrings in Java", "String Manipulation Techniques"], ["Handling edge cases and exceptions in programming logic", "Conditional Logic and Evaluation"], ["Writing and using methods/functions in Java", "Method Handling and Invocation in Java"], ["Using return statements to output results from methods in Java", "Method Return Values"], ["Utilizing method invocations with parameters to perform operations", "Method Handling and Invocation in Java"]], "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.": [["Understanding how to iterate over strings in Java", "String Manipulation Techniques"], ["Using if statements for conditional logic", "Conditional Logic and Evaluation"], ["Identifying patterns in strings and applying wildcard matching techniques", "Conditional Logic and Evaluation"], ["Returning boolean values based on condition checks", "Boolean Expressions and Logic"], ["Understanding how to use string methods such as contains and substring", "String Manipulation Techniques"]], "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.": [["Understand and identify string manipulation techniques in Java", "String Manipulation Techniques"], ["Implement loops and logic to traverse and analyze characters in a string", "String Manipulation Techniques"], ["Write and understand methods that return boolean values based on conditions", "Boolean Expressions and Logic"], ["Perform method invocations and pass arguments in Java", "Method Handling and Invocation in Java"], ["Understand the concept of balancing criteria in character sequences", "String Manipulation Techniques"], ["Manage variable scope and declaration within methods in Java", "Variable Scope and Management"], ["Utilize conditional statements to check for specific criteria in data structures", "Conditional Logic and Evaluation"]], "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.": [["Count occurrences of specific patterns within a string", "Conditional Logic and Evaluation"], ["Use string manipulation methods (e.g., substring, replace) to analyze strings", "String Manipulation Techniques"], ["Understand how to define a method in Java with parameters", "Method Handling and Invocation in Java"], ["Work with method invocations, including passing arguments and handling return values", "Method Handling and Invocation in Java"], ["Implement conditional statements (e.g., if statements) to check for string patterns", "Conditional Logic and Evaluation"], ["Utilize loops (e.g., for loop) to iterate through a string", "String Manipulation Techniques"]], "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.": [["Replacing characters in a string based on conditions", "Conditional Logic and Evaluation"], ["Returning a value from a method", "Method Return Values"], ["Using loops (for or while) for iteration", "Looping and Conditional Logic in Arrays"], ["Handling edge cases and testing for non-empty inputs", "Boolean Expressions and Logic"], ["Using method invocations to perform actions on strings", "Method Handling and Invocation in Java"], ["Conditional statements (if) for checking conditions", "Conditional Logic and Evaluation"], ["Understanding method declaration and defining formal parameters", "Method Handling and Invocation in Java"], ["String manipulation and searching for substrings", "String Manipulation Techniques"], ["Local variable declaration and initialization", "Variable Scope and Management"]], "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.": [["Utilizing loops, including for-loops, for repeated operations.", "Looping and Conditional Logic in Arrays"], ["Handling variable declarations and types in Java.", "Variable Scope and Management"], ["Creating and using methods with parameters in Java.", "Method Handling and Invocation in Java"], ["Using method invocations within expressions and statements.", "Method Handling and Invocation in Java"], ["Understanding string manipulation techniques in Java, including substring extraction and repetition.", "String Manipulation Techniques"], ["Implementing method return values in Java.", "Method Return Values"]], "Write a function in Java that implements the following logic: Given two strings, a and b, create a bigger string made of the first character of a, the first character of b, the second character of a, the second character of b, and so on. Any leftover characters go at the end of the result.": [["Skill in using method declarations and invoking methods", "Variable Scope and Management"], ["Understanding of local variable declarations and usage in methods", "Variable Scope and Management"], ["Ability to concatenate strings and build new strings from parts", "String Manipulation Techniques"], ["Familiarity with handling variable arguments and edge cases in functions", "Variable Scope and Management"], ["Knowledge of conditional statements for checking string lengths", "Conditional Logic and Evaluation"], ["Ability to implement loops for iterating through characters of strings", "String Manipulation Techniques"], ["Understanding of string manipulation in Java", "String Manipulation Techniques"]], "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".": [["Handling string literals and their manipulation in Java", "String Manipulation Techniques"], ["Using method invocation to process strings and return results", "Method Handling and Invocation in Java"], ["Understanding string manipulation in Java", "String Manipulation Techniques"], ["Implementing conditional statements to identify patterns in strings", "Conditional Logic and Evaluation"], ["Utilizing loop constructs to iterate through strings", "String Manipulation Techniques"]], "Given an array containing three ints, return the sum of all the elements.": [["Declaring and using local variables", "Variable Scope and Management"], ["Understanding method declaration syntax in Java", "Method Handling and Invocation in Java"], ["Utilizing method parameters to receive input data", "Method Handling and Invocation in Java"], ["Understanding array data structure in Java", "Array Management in Java"], ["Accessing elements of an array using indexing", "Array Management in Java"], ["Using return statements in methods", "Method Return Values"], ["Performing arithmetic operations on array elements", "Integer Operations and Manipulations"], ["Implementing control structures (e.g., loops) for iteration over arrays", "Looping and Conditional Logic in Arrays"]], "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.": [["Knowledge of method declaration and defining input parameters in Java.", "Method Handling and Invocation in Java"], ["Understanding of return statements and returning values from methods.", "Method Return Values"], ["Understanding of array data structure and its manipulation in Java.", "Array Management in Java"], ["Skills in handling variable declarations and initializations.", "Variable Scope and Management"], ["Ability to implement conditional statements and control flow (e.g., if statements, loops).", "Java Control Flow Structures"], ["Ability to use array creation expressions and array access syntax.", "Array Management in Java"]], "Write a function in Java that takes an int array as its parameter and returns the number of even ints it contains. Note: the % \"mod\" operator computes the remainder, e.g. 5 % 2 is 1.": [["Understand how to declare methods in Java with appropriate parameters and return types.", "Method Handling and Invocation in Java"], ["Implement conditional statements to evaluate whether an integer is even using the modulus operator.", "Conditional Logic and Evaluation"], ["Utilize return statements to provide the resulting count from a method.", "Method Return Values"], ["Parse and manipulate arrays in Java, including understanding of array types and dimensions.", "Array Management in Java"], ["Use of loops (such as enhanced for loops or traditional for loops) to iterate through elements of an array.", "Looping and Conditional Logic in Arrays"], ["Maintain a counter to keep track of the number of even integers found during iteration.", "Looping and Conditional Logic in Arrays"]], "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.": [["Working with multi-step logical expressions", "Conditional Logic and Evaluation"], ["Returning values from methods based on conditions", "Conditional Logic and Evaluation"], ["Organizing code into structured methods", "Problem Decomposition and Modular Programming"], ["Using logical operators to evaluate conditions", "Conditional Logic and Evaluation"], ["Understanding of method parameters and return types in Java", "Method Handling and Invocation in Java"], ["Iterating through elements of an array using loops", "Looping and Conditional Logic in Arrays"], ["Utilizing conditional statements to compare values", "Conditional Logic and Evaluation"], ["Handling edge cases such as empty arrays", "Array Management in Java"], ["Understanding of arrays and their properties", "Array Management in Java"]], "Write a function in Java that takes an array and returns the sum of the numbers in the array, or 0 if the array is empty. Except the number 13 is very unlucky, so it does not count any 13, or any number that immediately follows a 13.": [["Utilize return statements to output results from methods", "Method Return Values"], ["Perform data validation and special case handling in Java", "Integer Operations and Manipulations"], ["Know how to use arrays and access their elements in Java", "Array Management in Java"], ["Understand how to define and declare methods in Java", "Variable Scope and Management"], ["Use variable declarations and updates within a method", "Variable Scope and Management"], ["Implement control flow using loops and conditionals in Java", "Java Control Flow Structures"]], "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.": [["Return boolean values based on the evaluation of conditions", "Boolean Expressions and Logic"], ["Understand and implement array traversal techniques using loops", "Looping and Conditional Logic in Arrays"], ["Formulate conditional expressions for checking specific conditions in arrays", "Conditional Logic and Evaluation"], ["Implement and interpret nested if-statements to handle complex logical conditions", "Conditional Logic and Evaluation"], ["Utilize logical operators to combine multiple conditions", "Conditional Logic and Evaluation"], ["Access array elements dynamically within a loop construct", "Looping and Conditional Logic in Arrays"]], "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.": [["Familiarity with identifying and handling different data types (e.g., odd/even integers)", "Integer Operations and Manipulations"], ["Ability to access and modify elements in an array", "Array Management in Java"], ["Ability to iterate through arrays using loops", "Looping and Conditional Logic in Arrays"], ["Ability to implement conditional logic with if statements", "Conditional Logic and Evaluation"], ["Knowledge of helper methods to perform specific tasks", "Problem Decomposition and Modular Programming"], ["Understanding of array data structures in Java", "Array Management in Java"], ["Understanding of method declaration and invocation", "Method Handling and Invocation in Java"], ["Ability to return modified arrays from a method", "Array Management in Java"], ["Knowledge of how to declare and use local variables", "Variable Scope and Management"]], "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.": [["Implementation of conditional statements (if statements) in Java", "Java Control Flow Structures"], ["Understanding of array indexing and access in Java", "Array Management in Java"], ["Use of loops (for statements) for iteration through collections", "Looping and Conditional Logic in Arrays"], ["Knowledge of method declarations and parameter passing in Java", "Method Handling and Invocation in Java"], ["Implementing return statements to provide output from methods", "Method Return Values"], ["Ability to compare groups of elements within arrays", "Array Management in Java"], ["Understanding of variable declaration and scope within methods", "Variable Scope and Management"], ["Building and utilizing logical expressions for conditions", "Conditional Logic and Evaluation"]], "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.": [["Use return statements to provide the final count or result from a method.", "Method Return Values"], ["Utilize local variables to track counts or states during array traversal.", "Array Management in Java"], ["Apply array indexing to access elements within an array based on certain conditions.", "Array Management in Java"], ["Debug and test the solution to ensure it accurately identifies clumps in various scenarios.", "Conditional Logic and Evaluation"], ["Implement logic to detect and count occurrences that meet specific criteria (e.g., clumps of elements).", "Conditional Logic and Evaluation"], ["Understand the distinction between local and instance variables in the context of method execution.", "Variable Scope and Management"], ["Understand and define clumps in an array context, specifically identifying adjacent elements with the same value.", "Looping and Conditional Logic in Arrays"], ["Implement control flow structures such as loops and conditionals to traverse and analyze elements in an array.", "Looping and Conditional Logic in Arrays"]], "Given an array, return an array that contains exactly the same numbers as the original array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. (This is a slightly harder version of the fix34 problem.)": [["Skill in constructing algorithms for specific data rearrangement based on given rules.", "Conditional Logic and Evaluation"], ["Proficiency in using control structures such as loops and conditional statements in Java.", "Java Control Flow Structures"], ["Knowledge of maintaining the position of specific elements while rearranging others in an array.", "Array Management in Java"], ["Experience with writing and interpreting expressions that involve array indexing and updates.", "Array Management in Java"], ["Familiarity with variable declaration and usage within Java methods.", "Variable Scope and Management"], ["Understanding of arrays and their manipulation in programming.", "Array Management in Java"], ["Ability to implement conditional logic within loops.", "Conditional Logic and Evaluation"]], "Given an int array, return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.": [["Utilize control flow statements (if, while) for making decisions during iteration.", "Java Control Flow Structures"], ["Utilize array access to read individual elements based on indices.", "Array Management in Java"], ["Compute and accumulate sums of numeric values while handling exceptions.", "Integer Operations and Manipulations"], ["Declare and manipulate variables to store sums and other computed values.", "Integer Operations and Manipulations"], ["Understand how to iterate through an array using loops.", "Looping and Conditional Logic in Arrays"], ["Implement conditional logic to ignore specific sections of an array based on defined criteria.", "Array Management in Java"]], "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.": [["Creating and manipulating local variables in methods", "Variable Scope and Management"], ["Modifying array contents in place or creating a new array", "Array Management in Java"], ["Understanding arrays and their indexing in Java", "Array Management in Java"], ["Using the return statement to output an array from a method", "Method Return Values"], ["Assigning values to array indices based on conditions", "Array Management in Java"], ["Using conditional statements to filter elements in an array", "Array Management in Java"], ["Implementing loops to iterate through array elements", "Looping and Conditional Logic in Arrays"]], "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.": [["Knowledge of conditional statements (if) to check specific conditions (like multiples of 10).", "Conditional Logic and Evaluation"], ["Understanding of variable scoping and declaration inside loops.", "Variable Scope and Management"], ["Ability to implement and utilize return statements.", "Method Return Values"], ["Understanding of arrays and their indexing in Java.", "Array Management in Java"], ["Logical reasoning for maintaining states between multiples of a condition.", "Conditional Logic and Evaluation"], ["Familiarity with assignment operations to modify array elements.", "Array Management in Java"], ["Ability to use loops (for or while) to iterate over array elements.", "Looping and Conditional Logic in Arrays"], ["Skill in updating values within an array based on specific conditions.", "Array Management in Java"]], "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.": [["Ability to work with arrays, including accessing and modifying elements.", "Array Management in Java"], ["Use of local variables to store intermediate results during calculations.", "Variable Scope and Management"], ["Understand and utilize integer division in Java correctly.", "Integer Operations and Manipulations"], ["Understand how to define and implement a method in Java.", "Method Handling and Invocation in Java"], ["Use of loops, particularly for statements or enhanced for loops, to iterate over array elements.", "Looping and Conditional Logic in Arrays"], ["Perform arithmetic operations, including calculating the sum and average of integer values.", "Integer Operations and Manipulations"], ["Implement conditional logic to identify and handle maximum and minimum values in an array.", "Conditional Logic and Evaluation"], ["Knowledge of Java syntax for method calls and variable assignments.", "Method Handling and Invocation in Java"]], "Given a number n, create and return a new int array of length n, containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which case just return a length 0 array. You do not need a separate if statement for the length-0 case; the for loop should naturally execute 0 times in that case, so it just works. The syntax to make a new int array is new int[desired_length].": [["Use assignment expressions to populate array elements.", "Array Management in Java"], ["Recognize how loops function with edge cases like zero iterations.", "Looping and Conditional Logic in Arrays"], ["Understand array creation syntax in Java.", "Array Management in Java"], ["Understand method declaration and parameters in Java.", "Method Handling and Invocation in Java"], ["Implement for loops to iterate over a sequence of integers.", "Looping and Conditional Logic in Arrays"], ["Utilize return statements to output results from methods.", "Method Return Values"]], "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.": [["Understanding and implementing basic control flow structures (if statements, loops) in Java.", "Java Control Flow Structures"], ["Converting data types, specifically between integers and strings in Java.", "Integer Operations and Manipulations"], ["Using conditional operators to determine actions based on multiple conditions.", "Conditional Logic and Evaluation"], ["Utilizing built-in Java classes and methods effectively (e.g., String.valueOf).", "String Manipulation Techniques"], ["Creating and invoking methods with parameters and return values.", "Method Handling and Invocation in Java"], ["Working with arrays and array manipulation in Java.", "Array Management in Java"]], "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.": [["Ability to implement conditional logic to check adjacency within an array", "Boolean Expressions and Logic"], ["Skill in using return statements to output boolean values based on condition checks", "Boolean Expressions and Logic"], ["Knowledge of control flow statements such as for-loops and if-statements", "Java Control Flow Structures"], ["Understanding of managing local variables and their scope within loops and conditional blocks", "Variable Scope and Management"], ["Familiarity with the syntax and structure of Java method declarations and parameter passing", "Method Handling and Invocation in Java"], ["Understanding of array access and manipulation in Java", "Array Management in Java"]], "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.": [["Work with local variables and scope", "Variable Scope and Management"], ["Implement iterative constructs for summing values", "Integer Operations and Manipulations"], ["Understand array data structures and operations", "Array Management in Java"], ["Calculate cumulative sums and maintain state across iterations", "Looping and Conditional Logic in Arrays"], ["Apply enhanced for-loops for iteration", "Looping and Conditional Logic in Arrays"], ["Manipulate and access elements in arrays using indexing", "Array Management in Java"], ["Use conditional statements to compare sums", "Conditional Logic and Evaluation"]], "Given n >= 0, create an array with the pattern {1, 1, 2, 1, 2, 3, ... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n * (n + 1)/2.": [["Implement nested loops to fill multidimensional patterns in arrays", "Looping and Conditional Logic in Arrays"], ["Manipulate array elements using indexing and assignment operations", "Array Management in Java"], ["Understand array creation and initialization in Java", "Array Management in Java"], ["Use control structures (for-loops) to iterate through a range of numbers", "Looping and Conditional Logic in Arrays"], ["Calculate mathematical formulas involving summation for array size determination", "Integer Operations and Manipulations"], ["Declare and use local variables within method scopes", "Variable Scope and Management"], ["Define methods with parameters and return values in Java", "Method Handling and Invocation in Java"]], "Return an array that is \"left shifted\" by one--so for an input of {6, 2, 5, 3}, the method returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.": [["Utilizing local variable declarations and assignments within Java methods", "Variable Scope and Management"], ["Conditionally handling empty or singular-element arrays to avoid errors", "Conditional Logic and Evaluation"], ["Implementation of loops for iterating through arrays", "Looping and Conditional Logic in Arrays"], ["Creating and returning new arrays versus modifying existing ones", "Array Management in Java"], ["Understanding array manipulation in Java, including shifting elements and indexing", "Array Management in Java"], ["Constructing and evaluating expressions related to array lengths and boundaries", "Array Management in Java"], ["Formulating return statements to send back modified arrays", "Conditional Logic and Evaluation"]]}